# -*- coding: utf-8 -*-
import time

# Form implementation generated from reading ui file 'scope.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import image.pic
import pyvisa as visa
import ctypes
ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID("myappid")


class Ui_scope(object):
    def setupUi(self, scope):
        scope.setObjectName("scope")
        scope.resize(640, 480)
        self.centralwidget = QtWidgets.QWidget(scope)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(500, 350, 120, 40))
        self.pushButton_4.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.display_ch4)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(140, 350, 120, 40))
        self.pushButton_5.setStyleSheet("background-color: rgb(255, 255, 0);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.display_ch1)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(380, 350, 120, 40))
        self.pushButton_6.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.display_ch3)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(260, 350, 120, 40))
        self.pushButton_7.setStyleSheet("background-color: rgb(255, 85, 255);")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.display_ch2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(54, 320, 81, 21))
        self.label.setStyleSheet("font: 87 9pt \"Arial Black\";\n"
"font: 10pt \"Arial\";\n"
"")
        self.label.setTextFormat(QtCore.Qt.RichText)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(160, 390, 41, 31))
        self.pushButton.clicked.connect(self.impandence_ch1_1M)
        self.pushButton.setStyleSheet("font: 87 9pt \"Arial\";")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(200, 390, 41, 31))
        self.pushButton_2.setStyleSheet("font: 87 9pt \"Arial\";")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.impandence_ch1_50)
        self.toolButton = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton.setGeometry(QtCore.QRect(140, 320, 30, 18))
        self.toolButton.setObjectName("toolButton")
        self.toolButton.clicked.connect(self.scale_ch1_reduce)
        self.toolButton_2 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_2.setGeometry(QtCore.QRect(170, 320, 30, 18))
        self.toolButton_2.setObjectName("toolButton_2")
        self.toolButton_2.clicked.connect(self.scale_ch1_add)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 317, 55, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setText('(V)')
        self.toolButton_3 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_3.setGeometry(QtCore.QRect(260, 320, 30, 18))
        self.toolButton_3.setObjectName("toolButton_3")
        self.toolButton_3.clicked.connect(self.scale_ch2_reduce)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(320, 317, 55, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setText('(V)')
        self.toolButton_4 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_4.setGeometry(QtCore.QRect(290, 320, 30, 18))
        self.toolButton_4.setObjectName("toolButton_4")
        self.toolButton_4.clicked.connect(self.scale_ch2_add)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(280, 390, 41, 31))
        self.pushButton_3.setStyleSheet("font: 87 9pt \"Arial\";")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.impandence_ch2_1M)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(320, 390, 41, 31))
        self.pushButton_8.setStyleSheet("font: 87 9pt \"Arial\";")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.impandence_ch2_50)
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(390, 390, 41, 31))
        self.pushButton_9.setStyleSheet("font: 87 9pt \"Arial\";")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.impandence_ch3_1M)
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(430, 390, 41, 31))
        self.pushButton_10.setStyleSheet("font: 87 9pt \"Arial\";")
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_10.clicked.connect(self.impandence_ch3_50)
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(520, 390, 41, 31))
        self.pushButton_11.setStyleSheet("font: 87 9pt \"Arial\";")
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_11.clicked.connect(self.impandence_ch4_1M)
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(560, 390, 41, 31))
        self.pushButton_12.setStyleSheet("font: 87 9pt \"Arial\";")
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_12.clicked.connect(self.impandence_ch4_50)
        self.toolButton_5 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_5.setGeometry(QtCore.QRect(380, 320, 30, 18))
        self.toolButton_5.setObjectName("toolButton_5")
        self.toolButton_5.clicked.connect(self.scale_ch3_reduce)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(440, 317, 55, 21))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setText('(V)')
        self.toolButton_6 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_6.setGeometry(QtCore.QRect(410, 320, 30, 18))
        self.toolButton_6.setObjectName("toolButton_6")
        self.toolButton_6.clicked.connect(self.scale_ch3_add)
        self.toolButton_7 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_7.setGeometry(QtCore.QRect(500, 320, 30, 18))
        self.toolButton_7.setObjectName("toolButton_7")
        self.toolButton_7.clicked.connect(self.scale_ch4_reduce)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(560, 317, 55, 21))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_4.setText('(V)')
        self.toolButton_8 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_8.setGeometry(QtCore.QRect(530, 320, 30, 18))
        self.toolButton_8.setObjectName("toolButton_8")
        self.toolButton_8.clicked.connect(self.scale_ch4_add)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(40, 305, 581, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(45, 323, 31, 16))
        self.radioButton.setStyleSheet("font: 75 9pt \"Bahnschrift\";")
        self.radioButton.setText("")
        self.radioButton.setObjectName("radioButton")
        self.radioButton.clicked.connect(self.get_scale)
        self.comboBox_1 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_1.setGeometry(QtCore.QRect(140, 430, 110, 22))
        self.comboBox_1.setObjectName("comboBox")
        self.comboBox_1.addItems(
            ['最大值', '最小值', '平均值', '均方根', '峰峰值', '周期', '频率', '正占空比', '10-90%上升时间',
             '90-10%下降时间', ])
        self.comboBox_1.setCurrentIndex(-1)
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(260, 430, 110, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItems(
            ['最大值', '最小值', '平均值', '均方根', '峰峰值', '周期', '频率', '正占空比', '10-90%上升时间',
             '90-10%下降时间', ])
        self.comboBox_2.setCurrentIndex(-1)
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(380, 430, 110, 22))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItems(
            ['最大值', '最小值', '平均值', '均方根', '峰峰值', '周期', '频率', '正占空比', '10-90%上升时间',
             '90-10%下降时间', ])
        self.comboBox_3.setCurrentIndex(-1)
        self.comboBox_4 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_4.setGeometry(QtCore.QRect(500, 430, 110, 22))
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItems(
            ['最大值', '最小值', '平均值', '均方根', '峰峰值', '周期', '频率', '正占空比', '10-90%上升时间',
             '90-10%下降时间', ])
        self.comboBox_4.setCurrentIndex(-1)
        self.pushButton_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_15.setGeometry(QtCore.QRect(100, 432, 31, 21))
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_15.clicked.connect(self.get_measure_item)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(15, 418, 54, 12))
        self.label_2.setStyleSheet("font: 10pt \"Arial\"")
        self.label_2.setObjectName("label_2")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(45, 290, 31, 16))
        self.radioButton_2.setStyleSheet("font: 75 9pt \"Bahnschrift\";")
        self.radioButton_2.setText("")
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_2.clicked.connect(self.get_hor_delay)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(60, 287, 151, 21))
        self.label_3.setStyleSheet("\n"
                                   "font: 10pt \"Arial\";\n"
                                   "")
        self.label_3.setTextFormat(QtCore.Qt.RichText)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.toolButton_12 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_12.setGeometry(QtCore.QRect(215, 290, 30, 18))
        self.toolButton_12.setObjectName("toolButton_12")
        self.toolButton_12.clicked.connect(self.hor_delay_left)
        self.toolButton_13 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_13.setGeometry(QtCore.QRect(245, 290, 30, 18))
        self.toolButton_13.setObjectName("toolButton_13")
        self.toolButton_13.clicked.connect(self.hor_delay_right)
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(275, 287, 55, 21))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.lineEdit_8.setText('(ms)')
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(40, 275, 581, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(335, 290, 31, 16))
        self.radioButton_3.setStyleSheet("font: 75 9pt \"Bahnschrift\";")
        self.radioButton_3.setText("")
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_3.clicked.connect(self.hor_get_scale)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(343, 287, 151, 21))
        self.label_4.setStyleSheet("\n"
                                   "font: 10pt \"Arial\";\n"
                                   "")
        self.label_4.setTextFormat(QtCore.Qt.RichText)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.toolButton_14 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_14.setGeometry(QtCore.QRect(500, 290, 30, 18))
        self.toolButton_14.setObjectName("toolButton_14")
        self.toolButton_14.clicked.connect(self.hor_scale_reduce)
        self.toolButton_15 = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_15.setGeometry(QtCore.QRect(530, 290, 30, 18))
        self.toolButton_15.setObjectName("toolButton_15")
        self.toolButton_15.clicked.connect(self.hor_scale_add)
        self.lineEdit_9 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_9.setGeometry(QtCore.QRect(560, 287, 55, 21))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.lineEdit_9.setText('(ms)')
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(540, 30, 91, 81))
        self.pushButton_13.setStyleSheet("font: 10pt \"Arial\";\n"
                                         "background-color: rgb(211,211,211);")
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_13.clicked.connect(self.change_run_status)
        self.pushButton_16 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_16.setGeometry(QtCore.QRect(438, 30, 101, 31))
        self.pushButton_16.setStyleSheet("font: 10pt \"Arial\";")
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_16.clicked.connect(self.trig_mode)
        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(340, 60, 91, 31))
        self.checkBox_2.setStyleSheet("font: 10pt \"Arial\";")
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.clicked.connect(self.trig_level)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(428, 63, 113, 21))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_5.setText('(V)')
        self.pushButton_17 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_17.setGeometry(QtCore.QRect(425, 210, 113, 23))
        self.pushButton_17.setStyleSheet("font: 10pt \"Arial\";\n")
        self.pushButton_17.setObjectName("pushButton_17")
        self.pushButton_17.clicked.connect(self.get_img_name)
        self.comboBox_5 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_5.setGeometry(QtCore.QRect(430, 88, 110, 22))
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItems(['CH1', 'CH2', 'CH3', 'CH4' ])
        self.comboBox_5.setCurrentIndex(-1)
        self.checkBox_3 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_3.setGeometry(QtCore.QRect(340, 83, 91, 31))
        self.checkBox_3.setStyleSheet("font: 10pt \"Arial\";")
        self.checkBox_3.setObjectName("checkBox_3")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(330, 10, 305, 3))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(330, 10, 3, 110))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(330, 120, 305, 3))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(635, 10, 3, 110))
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setGeometry(QtCore.QRect(540, 150, 91, 81))
        self.pushButton_14.setStyleSheet("font: 10pt \"Arial\";")
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_14.clicked.connect(self.save_img)
        self.line_7 = QtWidgets.QFrame(self.centralwidget)
        self.line_7.setGeometry(QtCore.QRect(635, 130, 3, 110))
        self.line_7.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.line_8 = QtWidgets.QFrame(self.centralwidget)
        self.line_8.setGeometry(QtCore.QRect(330, 130, 305, 3))
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_8.setObjectName("line_8")
        self.line_9 = QtWidgets.QFrame(self.centralwidget)
        self.line_9.setGeometry(QtCore.QRect(330, 130, 3, 110))
        self.line_9.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_9.setObjectName("line_9")
        self.line_10 = QtWidgets.QFrame(self.centralwidget)
        self.line_10.setGeometry(QtCore.QRect(330, 240, 305, 3))
        self.line_10.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_10.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_10.setObjectName("line_10")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(-30, -20, 151, 81))
        self.label_5.setStyleSheet("image: url(:/pic/logo.png);")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(10, 40, 311, 201))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton_18 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_18.setGeometry(QtCore.QRect(210, 8, 113, 31))
        self.pushButton_18.setStyleSheet("font: 10pt \"Arial\";")
        self.pushButton_18.setObjectName("pushButton_18")
        self.pushButton_18.clicked.connect(self.slot1)
        self.pushButton_19 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_19.setGeometry(QtCore.QRect(270, 242, 51, 20))
        self.pushButton_19.setStyleSheet("font: 10pt \"Arial\";")
        self.pushButton_19.setObjectName("pushButton_19")
        self.pushButton_19.clicked.connect(self.clear_textbrowser_content)
        self.pushButton_20 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_20.setGeometry(QtCore.QRect(10, 432, 90, 21))
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_20.clicked.connect(self.OFF_all_measure)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 365, 111, 21))
        self.label_6.setStyleSheet("font: 8pt \"Mongolian Baiti\";")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 378, 111, 21))
        self.label_7.setStyleSheet("font: 8pt \"Mongolian Baiti\";")
        self.label_7.setObjectName("label_7")
        scope.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(scope)
        self.statusbar.setObjectName("statusbar")
        scope.setStatusBar(self.statusbar)

        self.retranslateUi(scope)
        QtCore.QMetaObject.connectSlotsByName(scope)

    def retranslateUi(self, scope):
        _translate = QtCore.QCoreApplication.translate
        scope.setWindowTitle(_translate("scope", "scope"))
        self.pushButton_4.setText(_translate("scope", "CH4"))
        self.pushButton_5.setText(_translate("scope", "CH1"))
        self.pushButton_6.setText(_translate("scope", "CH3"))
        self.pushButton_7.setText(_translate("scope", "CH2"))
        self.label.setText(_translate("scope", "VERTICAL"))
        self.pushButton.setText(_translate("scope", "1M"))
        self.pushButton_2.setText(_translate("scope", "50Ω"))
        self.toolButton.setText(_translate("scope", "<"))
        self.toolButton_2.setText(_translate("scope", ">"))
        self.toolButton_3.setText(_translate("scope", "<"))
        self.toolButton_4.setText(_translate("scope", ">"))
        self.pushButton_3.setText(_translate("scope", "1M"))
        self.pushButton_8.setText(_translate("scope", "50Ω"))
        self.pushButton_9.setText(_translate("scope", "1M"))
        self.pushButton_10.setText(_translate("scope", "50Ω"))
        self.pushButton_11.setText(_translate("scope", "1M"))
        self.pushButton_12.setText(_translate("scope", "50Ω"))
        self.toolButton_5.setText(_translate("scope", "<"))
        self.toolButton_6.setText(_translate("scope", ">"))
        self.toolButton_7.setText(_translate("scope", "<"))
        self.toolButton_8.setText(_translate("scope", ">"))
        self.pushButton_15.setText(_translate("scope", "Add"))
        self.label_2.setText(_translate("scope", "Measure"))
        self.label_3.setText(_translate("scope", "HORIZONTAL POSITION"))
        self.toolButton_12.setText(_translate("scope", "<"))
        self.toolButton_13.setText(_translate("scope", ">"))
        self.label_4.setText(_translate("scope", "HORIZONTAL SCALE"))
        self.toolButton_14.setText(_translate("scope", "<"))
        self.toolButton_15.setText(_translate("scope", ">"))
        self.pushButton_13.setText(_translate("scope", "Run/Stop"))
        self.pushButton_16.setText(_translate("scope", "Trig Mode"))
        self.checkBox_2.setText(_translate("scope", "Trig level(V)"))
        self.pushButton_17.setText(_translate("scope", "Confirm"))
        self.checkBox_3.setText(_translate("scope", "Trig Source"))
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(425, 190, 113, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton_14.setText(_translate("scope", "Save image"))
        self.label_5.setText(_translate("scope", ""))
        self.pushButton_18.setText(_translate("scope", "Display Measure"))
        self.pushButton_19.setText(_translate("scope", "Clear"))
        self.pushButton_20.setText(_translate("scope", "Clear All"))
        self.label_6.setText(_translate("scope", "Author: Chad Qin"))
        self.label_7.setText(_translate("scope", "Version: V0.9"))

    def display_ch1(self):
        global OSC
        status = OSC.query('CHAN1:SWIT?').strip()
        if status == 'ON':
            OSC.write(':CHANnel1:SWITch OFF')
        elif status == 'OFF':
            OSC.write(':CHANnel1:SWITch ON')

    def display_ch2(self):
        global OSC
        status = OSC.query('CHAN2:SWIT?').strip()
        if status == 'ON':
            OSC.write(':CHANnel2:SWITch OFF')
        else:
            OSC.write(':CHANnel2:SWITch ON')

    def display_ch3(self):
        global OSC
        status = OSC.query('CHAN3:SWIT?').strip()
        if status == 'ON':
            OSC.write(':CHANnel3:SWITch OFF')
        else:
            OSC.write(':CHANnel3:SWITch ON')

    def display_ch4(self):
        global OSC
        status = OSC.query('CHAN4:SWIT?').strip()
        if status == 'ON':
            OSC.write(':CHANnel4:SWITch OFF')
        else:
            OSC.write(':CHANnel4:SWITch ON')
    def hor_delay_left(self):
        scale = OSC.query('TIM:SCAL?').strip()
        delay = float(OSC.query('TIM:DEL?').strip())+float(scale)
        OSC.write(':TIMebase:DELay {}'.format(str(delay)))
    def hor_delay_right(self):
        scale = OSC.query('TIM:SCAL?').strip()
        delay = abs(float(OSC.query('TIM:DEL?').strip())) + float(scale)
        OSC.write(':TIMebase:DELay {}'.format(str(-delay)))

    def get_hor_delay(self):
        if (self.lineEdit_8.text().split(".")[0]).isdigit() or self.lineEdit_8.text().isdigit() or (self.lineEdit_8.text().split('-')[-1]).split(".")[-1].isdigit():
            scale_1 = float(self.lineEdit_8.text())/1000
            OSC.write('::TIMebase:DELay {}'.format(str(scale_1)))
        else:
            self.lineEdit_8.setClearButtonEnabled(True)
            self.lineEdit_8.clear()
            pass
    def hor_scale_reduce(self):
        scale = OSC.query('TIM:SCAL?').strip()
        scale = float(scale) / 10
        OSC.write(':TIMebase:SCALe {}'.format(str(scale)))

    def hor_scale_add(self):
        scale = OSC.query('TIM:SCAL?').strip()
        scale = float(scale) * 10
        OSC.write(':TIMebase:SCALe {}'.format(str(scale)))

    def hor_get_scale(self):
        if (self.lineEdit_9.text().split(".")[0]).isdigit() or self.lineEdit_9.text().isdigit() or (self.lineEdit_9.text().split('-')[-1]).split(".")[-1].isdigit():
            scale = float(self.lineEdit_9.text())/1000
            OSC.write(':TIMebase:SCALe {}'.format(str(scale)))
        else:
            self.lineEdit_9.setClearButtonEnabled(True)
            self.lineEdit_9.clear()
    def impandence_ch1_1M(self):
        OSC.write(':CHANnel1:IMPedance ONEMeg')
        OSC.write(':CHANnel1:PROBe VALue,1.00E+01')
    def impandence_ch1_50(self):
        reply = QMessageBox.warning(None, '提示', '确认输入电压是小于5V，点击\"YES\"继续。', QMessageBox.Yes | QMessageBox.No,QMessageBox.No)  # 默认关闭界面选择No
        # msg_box = QMessageBox(QMessageBox.warning, "Warning", "请确认输入信号小于5V")
        # msg_box.exec_()
        if reply == QMessageBox.Yes:
            OSC.write(':CHANnel1:IMPedance FIFTy')
            OSC.write(':CHANnel1:PROBe VALue,1')
        else:
            pass
    def impandence_ch2_1M(self):
        OSC.write(':CHANnel2:IMPedance ONEMeg')
        OSC.write(':CHANnel2:PROBe VALue,1.00E+01')
    def impandence_ch2_50(self):
        reply = QMessageBox.warning(None, '提示', '确认输入电压是小于5V，点击\"YES\"继续。', QMessageBox.Yes | QMessageBox.No,QMessageBox.No)  # 默认关闭界面选择No
        if reply == QMessageBox.Yes:
            OSC.write(':CHANnel2:IMPedance FIFTy')
            OSC.write(':CHANnel2:PROBe VALue,1')
        else:
            pass
    def impandence_ch3_1M(self):
        OSC.write(':CHANnel3:IMPedance ONEMeg')
        OSC.write(':CHANnel3:PROBe VALue,1.00E+01')


    def impandence_ch3_50(self):
        reply = QMessageBox.warning(None, '提示', '确认输入电压是小于5V，点击\"YES\"继续。', QMessageBox.Yes | QMessageBox.No,QMessageBox.No)  # 默认关闭界面选择No
        if reply == QMessageBox.Yes:
            OSC.write(':CHANnel3:IMPedance FIFTy')
            OSC.write(':CHANnel3:PROBe VALue,1')
        else:
            pass
    def impandence_ch4_1M(self):
        OSC.write(':CHANnel4:IMPedance ONEMeg')
        OSC.write(':CHANnel4:PROBe VALue,1.00E+01')

    def impandence_ch4_50(self):
        reply = QMessageBox.warning(None, '提示', '确认输入电压是小于5V，点击\"YES\"继续。', QMessageBox.Yes | QMessageBox.No,QMessageBox.No)  # 默认关闭界面选择No
        if reply == QMessageBox.Yes:
            OSC.write(':CHANnel4:IMPedance FIFTy')
            OSC.write(':CHANnel4:PROBe VALue,1')
        else:
            pass

    def scale_ch1_reduce(self):
        scale = OSC.query('CHAN1:SCAL?').strip()
        scale = float(scale) / 10
        OSC.write(':CHANnel1:SCALe {}'.format(str(scale)))

    def scale_ch1_add(self):
        scale = OSC.query('CHAN1:SCAL?').strip()
        scale = float(scale) * 10
        OSC.write(':CHANnel1:SCALe {}'.format(str(scale)))

    def scale_ch2_reduce(self):
        scale = OSC.query('CHAN2:SCAL?').strip()
        scale = float(scale) / 10
        OSC.write(':CHANnel2:SCALe {}'.format(str(scale)))

    def scale_ch2_add(self):
        scale = OSC.query('CHAN2:SCAL?').strip()
        scale = float(scale) * 10
        OSC.write(':CHANnel2:SCALe {}'.format(str(scale)))

    def scale_ch3_reduce(self):
        scale = OSC.query('CHAN3:SCAL?').strip()
        scale = float(scale) / 10
        OSC.write(':CHANnel3:SCALe {}'.format(str(scale)))

    def scale_ch3_add(self):
        scale = OSC.query('CHAN3:SCAL?').strip()
        scale = float(scale) * 10
        OSC.write(':CHANnel3:SCALe {}'.format(str(scale)))
    def scale_ch4_reduce(self):
        scale = OSC.query('CHAN4:SCAL?').strip()
        scale = float(scale) / 10
        OSC.write(':CHANnel4:SCALe {}'.format(str(scale)))

    def scale_ch4_add(self):
        scale = OSC.query('CHAN4:SCAL?').strip()
        scale = float(scale) * 10
        OSC.write(':CHANnel4:SCALe {}'.format(str(scale)))

    def get_scale(self):
        if (self.lineEdit.text().split(".")[0]).isdigit() or self.lineEdit.text().isdigit() or (self.lineEdit.text().split('-')[-1]).split(".")[-1].isdigit():
            scale_1 = float(self.lineEdit.text())
            OSC.write(':CHANnel1:SCALe {}'.format(str(scale_1)))
        else:
            self.lineEdit.setClearButtonEnabled(True)
            self.lineEdit.clear()
            pass

        if (self.lineEdit_2.text().split(".")[0]).isdigit() or self.lineEdit_2.text().isdigit() or (self.lineEdit_3.text().split('-')[-1]).split(".")[-1].isdigit():
            scale_2 = float(self.lineEdit_2.text())
            OSC.write(':CHANnel2:SCALe {}'.format(str(scale_2)))
        else:
            self.lineEdit_2.setClearButtonEnabled(True)
            self.lineEdit_2.clear()
            pass

        if (self.lineEdit_3.text().split(".")[0]).isdigit() or self.lineEdit_3.text().isdigit() or (self.lineEdit_3.text().split('-')[-1]).split(".")[-1].isdigit():
            scale_3 = float(self.lineEdit_3.text())
            OSC.write(':CHANnel4:SCALe {}'.format(str(scale_3)))
        else:
            self.lineEdit_3.setClearButtonEnabled(True)
            self.lineEdit_3.clear()
            pass

        if (self.lineEdit_4.text().split(".")[0]).isdigit() or self.lineEdit_4.text().isdigit() or (self.lineEdit_4.text().split('-')[-1]).split(".")[-1].isdigit():
            scale_4 = float(self.lineEdit_4.text())
            OSC.write(':CHANnel4:SCALe {}'.format(str(scale_4)))
        else:
            self.lineEdit_4.setClearButtonEnabled(True)
            self.lineEdit_4.clear()
            pass

    def get_measure_item(self):
        item1 = self.comboBox_1.currentText().strip()
        item2 = self.comboBox_2.currentText().strip()
        item3 = self.comboBox_3.currentText().strip()
        item4 = self.comboBox_4.currentText().strip()
        self.comboBox_1.setCurrentIndex(-1)
        self.comboBox_2.setCurrentIndex(-1)
        self.comboBox_3.setCurrentIndex(-1)
        self.comboBox_4.setCurrentIndex(-1)
        j = 1
        for item in [item1,item2,item3,item4]:
            if item != '':
                for i in range(1,13):
                    mea_ch_status = OSC.query('MEAS:ADV:P{}?'.format(i)).strip()
                    if mea_ch_status == 'OFF':
                        if item == '最大值':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE MAX'.format(str(i)))
                            j += 1
                            break
                        elif item == '最小值':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE MIN'.format(str(i)))
                            j += 1
                            break
                        elif item == '平均值':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE MEAN'.format(str(i)))
                            j += 1
                            break
                        elif item == '均方根':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE RMS'.format(str(i)))
                            j += 1
                            break
                        elif item == '峰峰值':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE PKPK'.format(str(i)))
                            j += 1
                            break
                        elif item == '周期':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE PER'.format(str(i)))
                            j += 1
                            break
                        elif item == '频率':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE FREQ'.format(str(i)))
                            j += 1
                            break
                        elif item == '正占空比':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE DUTY'.format(str(i)))
                            j += 1
                            break
                        elif item == '10-90%上升时间':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE RISE10T90'.format(str(i)))
                            j += 1
                            break
                        elif item == '90-10%下降时间':
                            OSC.write(':MEASure:ADVanced:P{} ON'.format(str(i)))
                            OSC.write(':MEASure:ADVanced:P{}:SOURce1 C{}'.format(i,j))
                            OSC.write(':MEASure:ADVanced:P{}:TYPE FALL90T10'.format(str(i)))
                            j += 1
                            break
                    else:

                        pass
            else:
                j += 1
    def on_button_run_clicked(self):
        current_css = self.pushButton_13.styleSheet()
        if 'background-color: green' in current_css:
            self.pushButton_13.setStyleSheet("font: 10pt \"Arial\";\n"
                                             "background-color: red;")
            self.pushButton_13.setText("Stop")
        else:
            self.pushButton_13.setStyleSheet("font: 10pt \"Arial\";\n"
                                         "background-color: green;")
            self.pushButton_13.setText("Run")

    def trig_mode(self):
        trig_Mode = OSC.query('TRIG:MODE?').strip()
        if trig_Mode == "AUTO":
            OSC.write(':TRIGger:MODE NORMal')
            self.pushButton_16.setText("Normal")
        elif trig_Mode == "NORMal":
            OSC.write(':TRIGger:MODE SINGle')
            self.pushButton_16.setText("Single")
        elif trig_Mode == "SINGle":
            OSC.write(':TRIGger:MODE AUTO')
            self.pushButton_16.setText("Auto")
        else:
            OSC.write(':TRIGger:MODE AUTO')

    def change_run_status(self):
        run_status = OSC.query('TRIG:STAT?').strip()
        if run_status == 'Stop':
            OSC.write(':TRIGger:RUN')
            self.pushButton_13.setStyleSheet("font: 10pt \"Arial\";\n"
                                             "background-color: rgb(0, 255, 127);")
            self.pushButton_13.setText("Run")
        elif run_status == 'Ready' or 'Arm':
            OSC.write(':TRIGger:STOP')
            self.pushButton_13.setStyleSheet("font: 10pt \"Arial\";\n"
                                             "background-color: red;")
            self.pushButton_13.setText("Stop")

    def trig_level(self):
        if (self.lineEdit_5.text().split(".")[0]).isdigit() or self.lineEdit_5.text().isdigit() or \
                (self.lineEdit_5.text().split('-')[-1]).split(".")[-1].isdigit():
            trig_level = float(self.lineEdit_5.text())
            OSC.write(':TRIGger:EDGE:LEVel {}'.format(str(trig_level)))
        else:
            self.lineEdit_5.setClearButtonEnabled(True)
            self.lineEdit_5.clear()
            pass

    def get_img_name(self):
        img_name = self.lineEdit_6.text().strip()
        self.lineEdit_6.setStyleSheet("color: white ; background-color: green;")
        return img_name

    def save_img(self):
        img_name = self.get_img_name()
        OSC.write(":SAVE:IMAGe \"U-disk0/SIGLENT/{}.jpg\",JPG,OFF".format(img_name))
        self.lineEdit_6.clear()
        self.lineEdit_6.setStyleSheet("")

    # def ReadPath(self, Filepath):
    #     cur_path = getcwd()
    #     dir_path = QtWidgets.QFileDialog.getExistingDirectory(None, "选取文件夹", cur_path)
    #     print(dir_path)# 起始路径
    #     file_name = self.lineEdit_6.text().strip() + '.jpg'
    #     file_path = path.join(dir_path, file_name)
    #     print(":SAVE:IMAGe \"{}\",BMP,ON".format(file_path))
    #     OSC.write(":SAVE:IMAGe \"{}\",JPG,ON".format(file_path))

    def choose_trig_src(self):
        ch_source = self.comboBox_1.currentText().strip()
        if ch_source == 'CH1':
            OSC.write(':TRIGger:EDGE:SOURce C1')
        elif ch_source == 'CH2':
            OSC.write(':TRIGger:EDGE:SOURce C2')
        elif ch_source == 'CH3':
            OSC.write(':TRIGger:EDGE:SOURce C3')
        elif ch_source == 'CH4':
            OSC.write(':TRIGger:EDGE:SOURce C4')
    # def measure_data_display(self):
    # # while True:
    #     self.textBrowser.append('Hi\n')
    #     self.textBrowser.ensureCursorVisible()
    # #     sleep(1)

    def slot1(self):
        global measure_data,type

        for i in range(1,13):
            type = OSC.query('MEAS:ADV:P{}:TYPE?'.format(i)).strip()
            measure_data = OSC.query('MEAS:ADV:P{}:VAL?'.format(i)).strip()
            channel  = OSC.query('MEAS:ADV:P{}:SOUR1?'.format(i)).strip()
            if measure_data == '****':
                pass
            else:

                if type in ['RMS','MAX','MIN','MEAN','PKPK']:
                    if -1 < float(measure_data) < 1:
                        measure_data =float(measure_data)*1000
                        self.textBrowser.append('通道{}\t'.format(channel) + type + '：  ' + str(round(float(measure_data),3)) + 'mV')
                        self.textBrowser.ensureCursorVisible()
                    else:
                        self.textBrowser.append('通道{}\t'.format(channel) + type + '：  ' + str(round(float(measure_data), 3)) + 'V')
                        self.textBrowser.ensureCursorVisible()
                elif type == 'FREQ':
                    measure_data = float(measure_data)
                    self.textBrowser.append('通道{}\t'.format(channel) + type + '：  ' + str(round(float(measure_data)/1000000, 3)) + 'MHz')
                    self.textBrowser.ensureCursorVisible()
                elif type in ['PER','RISE10T90','FALL90T10']:
                    measure_data = '{:.10f}'.format(float(measure_data))
                    if float(measure_data) > 1:
                        self.textBrowser.append('通道{}\t'.format(channel) + type + '：  ' + str(round(float(measure_data), 3)) + 's')
                        self.textBrowser.ensureCursorVisible()
                    elif 0.001 < float(measure_data) < 1:
                        self.textBrowser.append('通道{}\t'.format(channel) + type + '：  ' + str(round(float(measure_data)*1000, 3)) + 'ms')
                        self.textBrowser.ensureCursorVisible()
                    elif 0.000001 < float(measure_data) < 0.001:
                        self.textBrowser.append('通道{}\t'.format(channel) + type + '：  ' + str(round(float(measure_data)*1000000, 3)) + 'us')
                        self.textBrowser.ensureCursorVisible()
                    elif 0.000000001 < float(measure_data) < 0.000001:
                        self.textBrowser.append('通道{}\t'.format(channel) + type + '：  ' + str(round(float(measure_data)*1000000000, 3)) + 'ns')
                        self.textBrowser.ensureCursorVisible()
                else:
                    self.textBrowser.append('通道{}\t'.format(channel) + type + '：  ' + str(float(measure_data)))
                    self.textBrowser.ensureCursorVisible()

    def clear_textbrowser_content(self):
        self.textBrowser.clear()
    def OFF_all_measure(self):
        for i in range(1,13):
            OSC.write(':MEASure:ADVanced:P{} OFF'.format(i))

# FSW = visa.ResourceManager()
# rm = visa.ResourceManager()  # 打开资源设备管理器
# devs = rm.list_resources_info("USB0:?*")  # 获取指定usb设备列表
# instrument = list(devs.keys())
# OSC = FSW.open_resource(instrument[0])
